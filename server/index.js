const express = require('express');
const path = require('path'); // NEW
const cors = require('cors');
const graphqlHTTP = require('express-graphql');
const gql = require('graphql-tag');
const { buildASTSchema } = require('graphql');
const DIST_DIR = path.join(__dirname, '../dist');
const HTML_FILE = path.join(DIST_DIR, 'index.html');

const POSTS = [
  { author: "John Doe", body: "Hello world", isAvailable: true },
  { author: "Jane Doe", body: "Hi, planet!", isAvailable: false },
];

const schema = buildASTSchema(gql`
  type Query {
    posts: [Post]
    post(id: ID!): Post
  }

  type Mutation {
    mutatedAvailability(input: PostInput!): Post
    mutatedContent(id: ID!): Post
  }

  type Post {
    id: ID
    author: String
    body: String
    isAvailable: Boolean
  }

  input PostInput {
    id: ID
    author: String!
    body: String!
    isAvailable: Boolean
  }
`);

const mapPost = (post, id) => post && ({ id, ...post });
let mappedPosts = POSTS.map(mapPost)

// const modifiedAvailability = (id) => {
//   mappedPosts[id].isAvailable = !mappedPosts[id].isAvailable;
//   POSTS.splice(id, 1, mappedPosts[id]);

//   return mappedPosts[id]
// }

const modifiedAvailability = ({ input: { id, author, body, isAvailable } }) => {
  const post = {id, author, body, isAvailable};
  post.isAvailable = !post.isAvailable;

  // mappedPosts[id].isAvailable = !mappedPosts[id].isAvailable;
  POSTS.splice(id, 1, post);

  return mapPost(post, id);
}

// const modifiedContent = ({ input: { id, author, body, isAvailable } }) => {
//   const post = {id, author, body, isAvailable};

//   post.author = 'Sara';
//   // post.body = 'L amica geniale';
//   post.isAvailable = mappedPosts[id].isAvailable;

//   POSTS.splice(id, 1, post);

//   console.log('POSTS', POSTS);

//   return mapPost(post, id);
// }

const modifiedContent = (id) => {

  mappedPosts[id].author = 'Sara' ;
  mappedPosts[id].body = 'L amica geniale';

  return mappedPosts[id]
}


const root = {
  posts: () => mappedPosts,
  post: ({ id }) => mapPost(POSTS[id], id),
  mutatedAvailability: ({ input: { id, author, body, isAvailable } }) => modifiedAvailability({ input: { id, author, body, isAvailable } }),
  mutatedContent: (id) => modifiedContent(id)

};

const app = express();
app.use(cors());
app.use('/graphql', graphqlHTTP({
  schema,
  rootValue: root,
  graphiql: true,
}));

app.use(express.static(DIST_DIR));

app.get('/', (req, res) => {
 res.sendFile(HTML_FILE); 
}); // Now, "/" route returns el html file generated by webpack into dist folder. It uses the middleware function use.static

const port = process.env.PORT || 3000
app.listen(port);
console.log(`Running a GraphQL API server at localhost:${port}/graphql`);
